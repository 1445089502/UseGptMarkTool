// ==UserScript==
// @name         隐藏指定元素（自动配置加载）
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  根据 URL 自动加载配置并隐藏元素。支持撤回、重做、保存、查看等功能。
// @author       诗薰 && ChatGPT
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // === 自动配置映射（可扩展多个网站） ===
    const hardcodedConfigMap = [
        {
            matchType: 'exact',
            pattern: '',
            configUrl: ''
        },
        {
            matchType: 'prefix',
            pattern: 'https://baidu.com/',
            configUrl: 'https://192.168.50.51/SelfTsukuru/TampermonkeyConfig/baidu.json'
        }
        // 可以继续添加其他网站配置
    ];

      // === 调试日志函数 ===
    function log(msg, ...args) {
        console.log('[隐藏元素]', msg, ...args);
    }

    let classNamesMap = new Map();
    let hidden = true;
    let previousState = [];
    let actionList = [];
    let currentIndex = -1;

    // UI 元素
    const buttonContainer = document.createElement('div');
    buttonContainer.style.position = 'fixed';
    buttonContainer.style.bottom = '10px';
    buttonContainer.style.right = '10px';
    buttonContainer.style.zIndex = 1000;

    const toggleButton = document.createElement('button');
    toggleButton.textContent = '操作面板';
    toggleButton.style.marginBottom = '5px';
    buttonContainer.appendChild(toggleButton);

    const panel = document.createElement('div');
    panel.style.display = 'none';
    panel.style.border = '1px solid #ccc';
    panel.style.padding = '10px';
    panel.style.backgroundColor = '#f9f9f9';
    panel.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
    buttonContainer.appendChild(panel);

    const actions = [
        { text: '隐藏元素', action: promptClassNameAndParent },
        { text: '撤回操作', action: undoLastAction },
        { text: '重做操作', action: redoLastAction },
        { text: '保存配置', action: saveConfig },
        { text: '加载配置', action: openConfigFile },
        { text: '查看配置', action: logCurrentConfig },
        { text: '历史记录', action: viewActionHistory }
    ];

    actions.forEach(({ text, action }) => {
        const btn = document.createElement('button');
        btn.textContent = text;
        btn.style.display = 'block';
        btn.style.marginBottom = '5px';
        btn.addEventListener('click', action);
        panel.appendChild(btn);
    });

    document.body.appendChild(buttonContainer);

    toggleButton.addEventListener('click', () => {
        panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
    });

    document.addEventListener('keydown', function (e) {
        if (e.key.toUpperCase() === 'TAB') {
            buttonContainer.style.display = buttonContainer.style.display !== 'none' ? 'none' : 'block';
        }
    });

    // === 功能函数 ===
    function promptClassNameAndParent() {
        const input = prompt("请输入要隐藏的元素的类名，用空格或回车分隔:");
        const newClassNames = input.split(/\s+/).filter(name => name.trim() !== '');
        const newParentLevels = parseInt(prompt("请输入要隐藏的父级数:"), 10);

        if (newClassNames.length > 0 && newParentLevels >= 0) {
            newClassNames.forEach(className => {
                classNamesMap.set(className, newParentLevels);
            });
            actionList = actionList.slice(0, currentIndex + 1);
            actionList.push({ type: 'hide', classNames: newClassNames, parentLevels: newParentLevels });
            currentIndex++;
            toggleElements(newClassNames, newParentLevels);
        }
    }

    function toggleElements(classNamesToToggle, parentLevelsToToggle) {
        if (classNamesToToggle.length === 0 || parentLevelsToToggle < 0) return;

        const currentState = [];
        classNamesToToggle.forEach(className => {
            const elements = document.querySelectorAll(`.${className}`);
            elements.forEach(function (element) {
                let parent = element;
                for (let i = 0; i < parentLevelsToToggle; i++) {
                    if (parent) parent = parent.parentElement;
                }
                if (parent) {
                    currentState.push({ element: parent, display: parent.style.display });
                    parent.style.display = hidden ? 'none' : '';
                }
            });
        });

        previousState.push([...currentState]);
        logCurrentConfig();
    }

    function undoLastAction() {
        if (currentIndex >= 0) {
            const lastAction = actionList[currentIndex];
            if (lastAction.type === 'hide') {
                previousState[currentIndex].forEach(({ element, display }) => {
                    element.style.display = display;
                });
                lastAction.classNames.forEach(className => classNamesMap.delete(className));
                previousState.pop();
            }
            currentIndex--;
            logCurrentConfig();
        }
    }

    function redoLastAction() {
        if (currentIndex < actionList.length - 1) {
            currentIndex++;
            const nextAction = actionList[currentIndex];
            if (nextAction.type === 'hide') {
                toggleElements(nextAction.classNames, nextAction.parentLevels);
                nextAction.classNames.forEach(className => {
                    classNamesMap.set(className, nextAction.parentLevels);
                });
            }
            logCurrentConfig();
        }
    }

    function viewActionHistory() {
        console.log('行为记录:', actionList);
    }

    function openConfigFile() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.style.display = 'none';
        input.addEventListener('change', handleFileSelect);
        document.body.appendChild(input);
        input.click();
    }

    function handleFileSelect(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const data = JSON.parse(e.target.result);
                applyConfig(data);
            };
            reader.readAsText(file);
        }
    }

    function saveConfig() {
        const data = { classNamesMap: [...classNamesMap] };
        const url = getFileName();
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = url;
        a.click();
        URL.revokeObjectURL(a.href);
    }

    function logCurrentConfig() {
        console.log('当前配置:', [...classNamesMap]);
    }

    function getFileName() {
        const hostname = window.location.hostname.replace(/\./g, '_');
        return `${hostname}.json`;
    }

    // === 自动加载 JSON 配置 ===
    function fetchAndApplyConfig(url) {
        fetch(url)
            .then(res => {
                if (!res.ok) throw new Error(`HTTP ${res.status}`);
                return res.json();
            })
            .then(data => {
                applyConfig(data);
                console.log('已自动加载配置:', data);
            })
            .catch(err => {
                console.error('自动加载配置失败:', err);
            });
    }

    function applyConfig(data) {
        if (data.classNamesMap && Array.isArray(data.classNamesMap)) {
            classNamesMap = new Map(data.classNamesMap);
            classNamesMap.forEach((parentLevels, className) => {
                toggleElements([className], parentLevels);
            });
        }
    }

    function checkAndAutoLoadConfig() {
        const currentUrl = window.location.href;
        for (const rule of hardcodedConfigMap) {
            if (
                (rule.matchType === 'exact' && currentUrl === rule.pattern) ||
                (rule.matchType === 'prefix' && currentUrl.startsWith(rule.pattern))
            ) {
                console.log(`匹配规则成功，正在加载配置: ${rule.configUrl}`);
                fetchAndApplyConfig(rule.configUrl);
                break;
            }
        }
    }

    // 页面加载后执行自动加载逻辑
    window.addEventListener('load', checkAndAutoLoadConfig);
})();
